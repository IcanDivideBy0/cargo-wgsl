22:53:01 [INFO] starting example main loop
22:53:01 [INFO] got notification: Notification { method: "workspace/didChangeConfiguration", params: Object({"settings": Object({"wgsl": Object({"autocompleate": Bool(true), "validateOnSave": Bool(true), "validateOnType": Bool(false)})})}) }
22:53:01 [INFO] got notification: Notification { method: "textDocument/didOpen", params: Object({"textDocument": Object({"languageId": String("wgsl"), "text": String("[[stage(vertex)]]\nfn vs_main([[builtin(vertex_index)]] in_vertex_index: u32) -> [[builtin(position)]] vec4<f32>{\n    let a: f32 = 0.0;\n    let b: i32 = 20;\n    let c = a + b;\n\n    let x = f32(i32(in_vertex_index) - 1);\n    let y = f32(i32(in_vertex_index & 1u) * 2 - 1);\n    return vec4<f32>(x, y, 0.0, 1.0);\n}\n\n\n[[stage(fragment)]]\nfn fs_main() -> [[location(0)]] vec4<f32>{\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}"), "uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl"), "version": Number(1)})}) }
22:53:05 [INFO] got notification: Notification { method: "textDocument/didChange", params: Object({"contentChanges": Array([Object({"range": Object({"end": Object({"character": Number(42), "line": Number(6)}), "start": Object({"character": Number(0), "line": Number(6)})}), "rangeLength": Number(42), "text": String("    let x  f32(i32(in_vertex_index) - 1);")})]), "textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl"), "version": Number(2)})}) }
22:53:06 [INFO] got notification: Notification { method: "textDocument/didSave", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl")})}) }
22:53:07 [INFO] got notification: Notification { method: "textDocument/didChange", params: Object({"contentChanges": Array([Object({"range": Object({"end": Object({"character": Number(41), "line": Number(6)}), "start": Object({"character": Number(0), "line": Number(6)})}), "rangeLength": Number(41), "text": String("    let x = f32(i32(in_vertex_index) - 1);")})]), "textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl"), "version": Number(3)})}) }
22:53:08 [INFO] got notification: Notification { method: "textDocument/didSave", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl")})}) }
22:53:08 [ERROR] Left: Constant([1]) of type Scalar { kind: Float, width: 4 }
22:53:08 [ERROR] Right: Constant([2]) of type Scalar { kind: Sint, width: 4 }
22:53:20 [INFO] got notification: Notification { method: "textDocument/didClose", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl")})}) }
22:53:22 [INFO] got notification: Notification { method: "textDocument/didOpen", params: Object({"textDocument": Object({"languageId": String("wgsl"), "text": String("[[block]]\nstruct ViewUniform {\n    transform: mat4x4<f32>;\n    size: vec2<f32>;\n};\n\n[[group(0), binding(0)]]\nvar<uniform> view_uniform: ViewUniform;\n\nstruct Vertex {\n    [[location(0)]] position: vec2<f32>;\n};\n\nstruct QuadInstance{\n    [[location(1)]] position: vec2<f32>;\n    [[location(2)]] size: vec2<f32>;\n    [[location(3)]] color: vec4<f32>;\n    [[location(4)]] border_radius: vec4<f32>;\n};\n\nstruct VertexOutput {\n    [[builtin(position)]] position: vec4<f32>;\n    [[location(0)]] src_position: vec2<f32>;\n\n    [[location(1)]] quad_size: vec2<f32>;\n    [[location(2)]] quad_color: vec4<f32>;\n    [[location(3)]] quad_border_radius: vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn vs_main(vertex: Vertex, quad: QuadInstance) -> VertexOutput {\n    var i_transform: mat4x4<f32> = mat4x4<f32>(\n        vec4<f32>(quad.size.x, 0.0, 0.0, 0.0),\n        vec4<f32>(0.0, quad.size.y, 0.0, 0.0),\n        vec4<f32>(0.0, 0.0, 1.0, 0.0),\n        vec4<f32>(quad.position, 0.0, 1.0)\n    );\n\n    var out: VertexOutput;\n    out.position = view_uniform.transform * i_transform * vec4<f32>(vertex.position, 0.0, 1.0);\n    out.src_position = vertex.position;\n\n    out.quad_color = quad.color;\n    out.quad_size = quad.size;\n    out.quad_border_radius = quad.border_radius;\n\n    return out;\n}\n\nfn corrner_alpha(radius: f32, pos: vec2<f32>, cords: vec2<f32>) -> f32{\n    let lower = radius - 0.7;\n    let upper = radius + 0.7;\n    return 1.0 - smoothStep(lower, upper, length(pos - cords));\n}\n\nfn fragment_alpha(\n    position: vec2<f32>,\n    size: vec2<f32>,\n    radius: vec4<f32>,\n) -> f32 {\n    let pos = position * size;\n    // Top Left\n    let tl = vec2<f32>(radius.x, radius.x);\n    // Top Right\n    let tr = vec2<f32>(size.x - radius.y, radius.y);\n    // Bottom Left\n    let bl = vec2<f32>(radius.z, size.y - radius.z);\n    // Bottom Right\n    let br = vec2<f32>(size.x - radius.w, size.y - radius.w);\n\n    if (pos.x < tl.x && pos.y < tl.y) {\n        return corrner_alpha(radius.x, pos, tl);\n    } elseif (pos.x > tr.x && pos.y < tr.y){\n        return corrner_alpha(radius.y, pos, tr);\n    } elseif (pos.x < bl.x && pos.y > bl.y){\n        return corrner_alpha(radius.z, pos, bl);\n    } elseif (pos.x > br.x && pos.y > br.y){\n        return corrner_alpha(radius.w, pos, br);\n    } else {\n        return 1.0;\n    }\n}\n\n\n[[stage(fragment)]]\nfn fs_main(in: VertexOutput) ->  [[location(0)]] vec4<f32> {\n    let alpha: f32 = fragment_alpha(\n        in.src_position.xy,\n        in.quad_size,\n        in.quad_border_radius\n    );\n\n    return vec4<f32>(in.quad_color.xyz, in.quad_color.w * alpha);\n}\n"), "uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/proper.wgsl"), "version": Number(1)})}) }
22:53:24 [INFO] got notification: Notification { method: "textDocument/didClose", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/proper.wgsl")})}) }
22:53:25 [INFO] got notification: Notification { method: "textDocument/didOpen", params: Object({"textDocument": Object({"languageId": String("wgsl"), "text": String("[[stage(vertex)]]\nfn vs_main([[builtin(vertex_index)]] in_vertex_index: u32) -> [[builtin(position)]] vec4<f32> \n    let x = f32(i32(in_vertex_index) - 1);\n    let y = f32(i32(in_vertex_index & 1u) * 2 - 1);\n    return vec4<f32>(x, y, 0.0, 1.0);\n}\n\n[[stage(fragment)]]\nfn fs_main() -> [[location(0)]] vec4<f32>{\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}"), "uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/no_bracket.wgsl"), "version": Number(1)})}) }
22:53:33 [INFO] got notification: Notification { method: "textDocument/didClose", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/no_bracket.wgsl")})}) }
22:53:33 [INFO] got notification: Notification { method: "textDocument/didOpen", params: Object({"textDocument": Object({"languageId": String("wgsl"), "text": String("[[stage(vertex)]]\nfn vs_main([[builtin(vertex_index)]] in_vertex_index: u32) -> [[builtin(position)]] vec4<f32>{\n    let a: f32 = 0.0;\n    let b: i32 = 20;\n    let c = a + b;\n\n    let x = f32(i32(in_vertex_index) - 1);\n    let y = f32(i32(in_vertex_index & 1u) * 2 - 1);\n    return vec4<f32>(x, y, 0.0, 1.0);\n}\n\n\n[[stage(fragment)]]\nfn fs_main() -> [[location(0)]] vec4<f32>{\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}"), "uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl"), "version": Number(3)})}) }
22:53:36 [INFO] got notification: Notification { method: "textDocument/didClose", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/type_error.wgsl")})}) }
22:53:36 [INFO] got notification: Notification { method: "textDocument/didOpen", params: Object({"textDocument": Object({"languageId": String("wgsl"), "text": String("[[stage(vertex)]]\nfn vs_main([[builtin(vertex_index)]] in_vertex_index: u32) -> [[builtin(position)]] vec4<f32> \n    let x = f32(i32(in_vertex_index) - 1);\n    let y = f32(i32(in_vertex_index & 1u) * 2 - 1);\n    return vec4<f32>(x, y, 0.0, 1.0);\n}\n\n[[stage(fragment)]]\nfn fs_main() -> [[location(0)]] vec4<f32>{\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}"), "uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/no_bracket.wgsl"), "version": Number(1)})}) }
22:53:37 [INFO] got notification: Notification { method: "textDocument/didSave", params: Object({"textDocument": Object({"uri": String("file:///home/poly/Documents/Programing/rust/cargo-wgsl/tests/no_bracket.wgsl")})}) }
